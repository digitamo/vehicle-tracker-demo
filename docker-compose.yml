# NOTE: Load balancing is handled by docker swarm, But you can use an external load balancer
# link: https://docs.docker.com/engine/swarm/ingress/

# NOTE: service discovery is also handled by docker swarm.
# TODO: Write note on how you would implement auto-scaling.

version: "3.1"
services:
  heartbeat:
    image: digitamo/heartbeat
    build: ./heartbeat
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: "0.1"
          memory: 50M
      restart_policy:
        condition: on-failure
#      placement:
#        constraints: [node.role == worker]
    environment:
      - FLASK_ENV=production
      - APP_SETTINGS=heartbeat.config.ProductionConfig
      - POSTGRES_USER_FILE=/run/secrets/pg_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/pg_password
      - POSTGRES_DB_FILE=/run/secrets/pg_database
    secrets:
      - pg_password
      - pg_user
      - pg_database
    ports:
      - "4000:80"
    healthcheck:
      test: curl --fail http://localhost:80/heartbeat/ping || exit 1
      interval: 10s
      timeout: 2s
      retries: 5
    networks:
      - back-net
    depends_on:
      - postgres

  search:
    image: digitamo/search
    build: ./search
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: "0.1"
          memory: 50M
      restart_policy:
        condition: on-failure
#      placement:
#        constraints: [node.role == worker]
    environment:
      - FLASK_ENV=production
      - APP_SETTINGS=search.config.ProductionConfig
      - POSTGRES_USER_FILE=/run/secrets/pg_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/pg_password
      - POSTGRES_DB_FILE=/run/secrets/pg_database
    ports:
      - "4001:80"
    healthcheck:
      test: curl --fail http://localhost:80/search/ping || exit 1
      interval: 10s
      timeout: 2s
      retries: 5
    networks:
      - back-net
    depends_on:
      - postgres


  postgres:
    image: postgres
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]
    environment:
      - POSTGRES_USER_FILE=/run/secrets/pg_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/pg_password
      - POSTGRES_DB_FILE=/run/secrets/pg_database
    secrets:
      - pg_password
      - pg_user
      - pg_database
    expose:
      - 5432
    networks:
      - back-net

  visualizer:
    image: dockersamples/visualizer:latest
    ports:
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - back-net

volumes:
  db-data:

networks:
  back-net:

secrets:
  pg_user:
    external: true
  pg_password:
    external: true
  pg_database:
    external: true