# NOTE: Load balancing is handled by docker swarm, But you can use an external load balancer
# link: https://docs.docker.com/engine/swarm/ingress/

# TODO: Write note on how you would implement auto-scaling.

version: "3.1"
services:
  heartbeat:
    image: digitamo/heartbeat
    build: back-end/heartbeat
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.1"
          memory: 50M
      restart_policy:
        condition: on-failure
    #      placement:
    #        constraints: [node.role == worker]
    environment:
      - FLASK_ENV=production
      - APP_SETTINGS=heartbeat.config.prod
      - POSTGRES_USER_FILE=/run/secrets/pg_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/pg_password
      - POSTGRES_DB_FILE=/run/secrets/pg_database
    secrets:
      - pg_password
      - pg_user
      - pg_database
    ports:
      - "4000:4000"
    # FIXME: add health checks back.
    #    healthcheck:
    #      test: curl --fail http://localhost:4000/heartbeat/ping || exit 1
    #      interval: 10s
    #      timeout: 2s
    #      retries: 5
    networks:
      - back-net
    depends_on:
      - postgres

  search:
    image: digitamo/search
    build: back-end/search
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.1"
          memory: 50M
      restart_policy:
        condition: on-failure
    #      placement:
    #        constraints: [node.role == worker]
    environment:
      - FLASK_ENV=production
      - APP_SETTINGS=search.config.prod
      - POSTGRES_USER_FILE=/run/secrets/pg_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/pg_password
      - POSTGRES_DB_FILE=/run/secrets/pg_database
    secrets:
      - pg_password
      - pg_user
      - pg_database
    ports:
      - "4001:4000"
    networks:
      - back-net
    depends_on:
      - postgres

  postgres:
    image: postgres:11
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER_FILE=/run/secrets/pg_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/pg_password
      - POSTGRES_DB_FILE=/run/secrets/pg_database
    secrets:
      - pg_password
      - pg_user
      - pg_database
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - back-net

  nginx:
    image: nginx:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 80:80
      - 443:443
    depends_on:
      - heartbeat
      - search
    networks:
      - back-net

  visualizer:
    image: dockersamples/visualizer:latest
    ports:
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - back-net

volumes:
  pgdata:

networks:
  back-net:

secrets:
  pg_user:
    external: true
  pg_password:
    external: true
  pg_database:
    external: true